package be.pathfinder.dmhelper.model;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import be.pathfinder.dmhelper.constants.Constants;
import be.pathfinder.dmhelper.enums.AbilityName;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.equalTo;

// TODO: Auto-generated Javadoc
/**
 * The Class CombatTest.
 */
public class CombatTest {

	/** The combat. */
	private Combat combat;
	
	/** The combatant. */
	private Combatant combatant;
	
	/** The c1. */
	private Combatant c1;
	
	/** The c2. */
	private Combatant c2;
	
	/** The c3. */
	private Combatant c3;
	
	/** The c4. */
	private Combatant c4;
	
	/** The c5. */
	private Combatant c5;

	/** The character1. */
	private Character character1;

	/** The character2. */
	private Character character2;

	/** The character3. */
	private Character character3;

	/** The character4. */
	private Character character4;

	/** The character5. */
	private Character character5;
	
	/**
	 * Prepares all common parts for the tests.
	 */
	@Before
	public void init(){
		combat = new Combat();
	}
	
	/**
	 * Test basic properties.
	 */
	@Test
	public void testBasicProperties(){
		//prepare
		combat.setRounds(Constants.INT_ONE);
		combat.addCharacter(combatant);
		
		//assert
		Assert.assertThat(combat.getRounds(), is(equalTo(Constants.INT_ONE)));
		Assert.assertThat(combat.getCombatants().get(0), is(equalTo(combatant)));
	}

	
	
	
	/**
	 * Verify initiative.
	 *
	 * @param combatant the combatant
	 * @param refCombatant the ref combatant
	 * @param rank the rank
	 */
	private void verifyInitiative(Combatant combatant, Combatant refCombatant, int rank){
		Assert.assertThat(combatant, is(equalTo(refCombatant)));
		Assert.assertThat(combatant.getInitiativeRank(), is(equalTo(rank)));
	}
	
	/**
	 * Setup character for initiative tests.
	 */
	private void setupCharacterForInitiativeTests(){
		character1.setDexterity(new Ability(12, AbilityName.DEXTERITY));
		character2.setDexterity(new Ability(10, AbilityName.DEXTERITY));
		character3.setDexterity(new Ability(14, AbilityName.DEXTERITY));
		character4.setDexterity(new Ability(16, AbilityName.DEXTERITY));
		character5.setDexterity(new Ability(16, AbilityName.DEXTERITY));
	}
	
	/**
	 * Initialize characters.
	 */
	private void initializeCharacters(){
		character1 = new Character();
		character2 = new Character();
		character3 = new Character();
		character4 = new Character();
		character5 = new Character();
	}
	
	/**
	 * Initialize combatants.
	 */
	private void initializeCombatants(){
		c1 = new Combatant();
		c2 = new Combatant();
		c3 = new Combatant();
		c4 = new Combatant();
		c5 = new Combatant();
	}
	
	/**
	 * Adds the combatants to combat.
	 */
	private void addCombatantsToCombat(){
		combat.addCharacter(c1);
		combat.addCharacter(c2);
		combat.addCharacter(c3);
		combat.addCharacter(c4);
		combat.addCharacter(c5);
	}
}
